// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/deck_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kwahome/cards-deck-api/internal/domain/model"
)

// MockDeckService is a mock of DeckService interface.
type MockDeckService struct {
	ctrl     *gomock.Controller
	recorder *MockDeckServiceMockRecorder
}

// MockDeckServiceMockRecorder is the mock recorder for MockDeckService.
type MockDeckServiceMockRecorder struct {
	mock *MockDeckService
}

// NewMockDeckService creates a new mock instance.
func NewMockDeckService(ctrl *gomock.Controller) *MockDeckService {
	mock := &MockDeckService{ctrl: ctrl}
	mock.recorder = &MockDeckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeckService) EXPECT() *MockDeckServiceMockRecorder {
	return m.recorder
}

// CreateDeck mocks base method.
func (m *MockDeckService) CreateDeck(cards model.Cards, shuffle bool) (*model.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeck", cards, shuffle)
	ret0, _ := ret[0].(*model.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeck indicates an expected call of CreateDeck.
func (mr *MockDeckServiceMockRecorder) CreateDeck(cards, shuffle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeck", reflect.TypeOf((*MockDeckService)(nil).CreateDeck), cards, shuffle)
}

// DrawCards mocks base method.
func (m *MockDeckService) DrawCards(deckID string, count int) (model.Cards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrawCards", deckID, count)
	ret0, _ := ret[0].(model.Cards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrawCards indicates an expected call of DrawCards.
func (mr *MockDeckServiceMockRecorder) DrawCards(deckID, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrawCards", reflect.TypeOf((*MockDeckService)(nil).DrawCards), deckID, count)
}

// OpenDeck mocks base method.
func (m *MockDeckService) OpenDeck(deckID string) (*model.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDeck", deckID)
	ret0, _ := ret[0].(*model.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDeck indicates an expected call of OpenDeck.
func (mr *MockDeckServiceMockRecorder) OpenDeck(deckID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDeck", reflect.TypeOf((*MockDeckService)(nil).OpenDeck), deckID)
}
